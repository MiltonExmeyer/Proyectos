package run;

import org.testng.Assert;
import org.testng.annotations.*;
import java.io.File;
import java.io.IOException;

import org.openqa.selenium.WebDriver;
import org.testng.annotations.Test;

import Utilidades.ExcelUtilidades;
import Utilidades.GenerarReportePdf;
import Utilidades.MyScreenRecorder;
import claseBase.ClaseBase;
import pagesObject.PagObjectMercuryTours;
import pagesObject.PageOBjectHomeTools;
import pagesObject.PageObjectAlertWindowsTools;
import pagesObject.PageObjectMercadoLibreCuenta;
import pagesObject.PageObjectMercadoLibreHome;
import pagesObject.PageObjectToolsDatePicker;
import org.apache.logging.log4j.*;
import org.apache.logging.log4j.core.filter.NoMarkerFilter;



@SuppressWarnings("unused")
public class Run {

	private static Logger log = LogManager.getLogger(Run.class.getName());
	WebDriver driver;
	
	PageObjectMercadoLibreHome home;
	PageObjectMercadoLibreCuenta cuenta;
	PageOBjectHomeTools homeTools;
	PageObjectAlertWindowsTools alertsTools;
	PageObjectToolsDatePicker dateTools;
	PagObjectMercuryTours mercury;
	ClaseBase claseBase;
	GenerarReportePdf generarReportePdf;
	String imagenMercadoLibre;
	String imagenReporteTools;
	String imagenReporteMercury;
	
	@BeforeClass
	
	@Parameters({"url","rutaImagenReporteMercLibre","rutaImagenReporteTools","rutaImagenReporteMercury","rutaOutput"})
	  public void beforeClass(@Optional("default") String url,
			  					@Optional("default") String rutaImagenReporteMercLibre,
			  					@Optional("default") String rutaImagenReporteTools,
			  					@Optional("default") String rutaImagenReporteMercury,
	  							@Optional("default") String rutaOutput) throws IOException
	  
	{	
		// INSTANCIAR LA CLASE PAGSOBJECTS
		driver = ClaseBase.chomeDriverConnetion();
		claseBase = new ClaseBase(driver);
		home = new PageObjectMercadoLibreHome(driver);
		cuenta = new PageObjectMercadoLibreCuenta(driver);
		homeTools = new PageOBjectHomeTools(driver);
		alertsTools = new PageObjectAlertWindowsTools(driver);
		dateTools = new PageObjectToolsDatePicker(driver);
		mercury = new PagObjectMercuryTours (driver);
		
		generarReportePdf =new GenerarReportePdf();
		imagenMercadoLibre = rutaImagenReporteMercLibre;
		imagenReporteTools = rutaImagenReporteTools;
		imagenReporteMercury = rutaImagenReporteMercury;
	}	

	
	@DataProvider(name = "datosMercLibrePro")
	public Object[][] datosMercLibrePro() throws Exception {
		Object[][] arreglo = ExcelUtilidades.getTableArray("./Data/data.xlsx", "compraProducto");
		return arreglo;
	}

	@Test(dataProvider = "datosMercLibrePro", priority = 1 )
	//INGRESAR A MERCADOLIBRE BUSCAR UN PRODUCTO, SELECCIONAR EL PRIMERO Y CREAR UNA CUENTA
	
	public void seleccionarPrimerProducto(String url, String ejecutar, String evidencia, String producto, String email)
			throws Exception {
		if (ejecutar.equals("Si")) {
			// OBTENER EL NOMBRE DEL METODO A EJECUTAR
			String nomTest = Thread.currentThread().getStackTrace()[1].getMethodName();
			// CREAR CARPERTA PARA ALMECENAMIENTO DE IMAGENES
			File rutaCarpeta = claseBase.crearCarpeta(nomTest);
			log.info("El caso de prueba : " +nomTest+"ha iniciado correctamente");
			// VALIDAR SI SE GENERA EVIDENCIA
			if (evidencia.equals("Si")) {
				try {
					generarReportePdf.setRutaImagen(imagenMercadoLibre);
					// INICIAR GRABACION EN VIDEO
					MyScreenRecorder.startRecording(nomTest, rutaCarpeta);
					// INICIA CREACION DE REPORTE PDF
					generarReportePdf.crearPlantilla(nomTest, rutaCarpeta);
					log.info("El caso de prueba : "+nomTest+" tomara evidencias");
					// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
					home.urlAcceso(url);
					// ACCEDER AL METODO DE PRUEBA INICIAL
					home.busquedaInicial(producto, rutaCarpeta, evidencia);
					cuenta.crearCuenta(email, rutaCarpeta, evidencia);
					// FINALIZAR GRABACION DE VIDEO
					MyScreenRecorder.stopRecording();
					// FINALILZAR CREACION DEL REPORTE PDF
					generarReportePdf.cerrarPlantilla("La prueba fue Exitosa");
					// driver.close();
				} catch (Exception e) {
					log.error(e.toString());
					// FINALIZAR GRABACION DE VIDEO
					MyScreenRecorder.stopRecording();
					// FINALILZAR CREACION DEL REPORTE PDF
					generarReportePdf.cerrarPlantilla("La prueba ha fallado");
					Assert.assertFalse(true);
				}
			} else {
				log.info("La automatizacion "+nomTest+" no tomara evidencias");
				System.out.println("No se tomaran evidencias para Mercado Libre Comprar Producto...");
				// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
				home.urlAcceso(url);
				// ACCEDER AL METODO DE PRUEBA INICIAL
				home.busquedaInicial(producto, rutaCarpeta, evidencia);
				cuenta.crearCuenta(email, rutaCarpeta, evidencia);
			}

		} else {
			log.info("El caso de prueba : Seleccionar producto ha Fallado al iniciar");
			System.out.println("La automatizacion no se ejecutara para Mercado libre comprar producto...");
		}
	}
	

	
	@DataProvider(name = "datosMercLibreCuenta")
	public Object[][] datosMercLibreCuenta() throws Exception {
		Object[][] arreglo = ExcelUtilidades.getTableArray("./Data/data.xlsx", "crearCuenta");
		return arreglo;
	}
	
	@Test(dataProvider = "datosMercLibreCuenta", priority = 2)
	//INGRESAR A MERCADOLIBRE CREA UNA CUENTA
	public void crearCuenta(String url, String ejecutar, String evidencia, String email) throws Exception {
		if (ejecutar.equals("Si")) {
			// OBTENER EL NOMBRE DEL METODO A EJECUTAR
			String nomTest = Thread.currentThread().getStackTrace()[1].getMethodName();
			// CREAR CARPERTA PARA ALMECENAMIENTO DE IMAGENES
			File rutaCarpeta = claseBase.crearCarpeta(nomTest);
			log.info("El caso de prueba : " +nomTest+"ha iniciado correctamente");
			// VALIDAR SI SE GENERA EVIDENCIA
			if (evidencia.equals("Si")) {
				try {
					generarReportePdf.setRutaImagen(imagenMercadoLibre);
					// INICIAR GRABACION EN VIDEO
					MyScreenRecorder.startRecording(nomTest, rutaCarpeta);
					// INICIA CREACION DE REPORTE PDF
					generarReportePdf.crearPlantilla(nomTest, rutaCarpeta);
					log.info("El caso de prueba : "+nomTest+" tomara evidencias");
					// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
					home.urlAcceso(url);
					// ACCEDER AL METODO DE PRUEBA INICIAL
					home.crearCuentaBtn(rutaCarpeta, evidencia);
					cuenta.crearCuenta(email, rutaCarpeta, evidencia);
					// FINALIZAR GRABACION DE VIDEO
					MyScreenRecorder.stopRecording();
					// FINALILZAR CREACION DEL REPORTE PDF
					generarReportePdf.cerrarPlantilla("La prueba fue Exitosa");
					// driver.close();
				} catch (Exception e) {
					log.error(e.toString());
					// FINALIZAR GRABACION DE VIDEO
					MyScreenRecorder.stopRecording();
					// FINALILZAR CREACION DEL REPORTE PDF
					generarReportePdf.cerrarPlantilla("La prueba ha fallado");
					Assert.assertFalse(true);
				}
			} else {
				log.info("La automatizacion "+nomTest+" no tomara evidencias");
				System.out.println("No se tomaran evidencias para Mercado libre crear cuenta...");
				// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
				home.urlAcceso(url);
				// ACCEDER AL METODO DE PRUEBA INICIAL
				home.crearCuentaBtn(rutaCarpeta, evidencia);
				cuenta.crearCuenta(email, rutaCarpeta, evidencia);
				// driver.close();
			}

		} else {
			log.info("El caso de prueba :Crear Cuenta ha Fallado al iniciar");
			System.out.println("La automatizacion no se ejecutara para Mercado libre crear cuenta...");
		}
	}
	
	
	
	@DataProvider(name = "datosToolsAlerts")
	public Object[][] datosToolsAlerts() throws Exception {
		Object[][] arreglo = ExcelUtilidades.getTableArray("./Data/data.xlsx", "alertsTools");
		return arreglo;
	}
	
	@Test(dataProvider = "datosToolsAlerts", priority = 3)
	//INGRESAR A TOOLS QA, SECCION ALERTS Y REALIZARLAS
	
	public void alertsTools(String url, String ejecutar, String evidencia, String input) throws Exception 
	{
		if (ejecutar.equals("Si")) 
		{
			// OBTENER EL NOMBRE DEL METODO A EJECUTAR
			String nomTest = Thread.currentThread().getStackTrace()[1].getMethodName();
			// CREAR CARPERTA PARA ALMECENAMIENTO DE IMAGENES
			File rutaCarpeta = claseBase.crearCarpeta(nomTest);
			log.info("El caso de prueba : " +nomTest+"ha iniciado correctamente");
			//VALIDAR SI SE GENERA EVIDENCIA
			if (evidencia.equals("Si")) {
			try {
				generarReportePdf.setRutaImagen(imagenReporteTools);
				// INICIAR GRABACION EN VIDEO
				MyScreenRecorder.startRecording(nomTest, rutaCarpeta);
				// INICIA CREACION DE REPORTE PDF
				generarReportePdf.crearPlantilla(nomTest, rutaCarpeta);
				log.info("El caso de prueba : "+nomTest+" tomara evidencias");
				// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
				homeTools.url(url);///
				// ACCEDER AL METODO DE PRUEBA INICIAL
				homeTools.buttonAlert(rutaCarpeta, evidencia);///
				alertsTools.alertas(input, evidencia, rutaCarpeta);///
				// FINALIZAR GRABACION DE VIDEO
				MyScreenRecorder.stopRecording();
				// FINALILZAR CREACION DEL REPORTE PDF
				generarReportePdf.cerrarPlantilla("La prueba fue Exitosa");
				//driver.close();
			} catch (Exception e) {
				log.error(e.toString());
				// FINALIZAR GRABACION DE VIDEO
				MyScreenRecorder.stopRecording();
				// FINALILZAR CREACION DEL REPORTE PDF
				generarReportePdf.cerrarPlantilla("La prueba ha fallado");
				Assert.assertFalse(true);
			}
				
			}else 
			{
				log.info("La automatizacion "+nomTest+" no tomara evidencias");
				System.out.println("La automatizacion no tomara evidencias para Tools QA Alerts...");
				// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
				homeTools.url(url);///
				// ACCEDER AL METODO DE PRUEBA INICIAL
				homeTools.buttonAlert(rutaCarpeta, evidencia);///
				alertsTools.alertas(input, evidencia, rutaCarpeta);///
				//driver.close();
			}
			
		} else 
		{
			log.info("El caso de prueba : Tools QA Alerts ha Fallado al iniciar");
			System.out.println("La automatizacion no se ejecutara para Tools QA Alerts...");
		}
	}
	
	
	@DataProvider(name = "datosToolsDate")
	public Object[][] datosToolsDate() throws Exception {
		Object[][] arreglo = ExcelUtilidades.getTableArray("./Data/data.xlsx", "dateTools");
		return arreglo;
	}
	
	@Test(dataProvider = "datosToolsDate", priority = 4)
	//INGRESAR A TOOLS QA, SECCION DATE HE INGRESAR LOS DATOS EN LOS TXT PRESENTES
	
	public void dateTools(String url, String ejecutar, String evidencia) throws Exception 
	{
		if (ejecutar.equals("Si")) 
		{
			// OBTENER EL NOMBRE DEL METODO A EJECUTAR
			String nomTest = Thread.currentThread().getStackTrace()[1].getMethodName();
			// CREAR CARPERTA PARA ALMECENAMIENTO DE IMAGENES
			File rutaCarpeta = claseBase.crearCarpeta(nomTest);
			log.info("El caso de prueba : " +nomTest+"ha iniciado correctamente");
			//VALIDAR SI SE GENERA EVIDENCIA
			if (evidencia.equals("Si")) {
			try {
				generarReportePdf.setRutaImagen(imagenReporteTools);
				// INICIAR GRABACION EN VIDEO
				MyScreenRecorder.startRecording(nomTest, rutaCarpeta);
				// INICIA CREACION DE REPORTE PDF
				generarReportePdf.crearPlantilla(nomTest, rutaCarpeta);
				log.info("El caso de prueba : "+nomTest+" tomara evidencias");
				// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
				homeTools.url(url);
				// ACCEDER AL METODO DE PRUEBA INICIAL
				homeTools.buttonDate(rutaCarpeta, evidencia);
				dateTools.sistemaDate(rutaCarpeta, evidencia);
				// FINALIZAR GRABACION DE VIDEO
				MyScreenRecorder.stopRecording();
				// FINALILZAR CREACION DEL REPORTE PDF
				generarReportePdf.cerrarPlantilla("La prueba fue Exitosa");
				//driver.close();
			} catch (Exception e) {
				log.error(e.toString());
				// FINALIZAR GRABACION DE VIDEO
				MyScreenRecorder.stopRecording();
				// FINALILZAR CREACION DEL REPORTE PDF
				generarReportePdf.cerrarPlantilla("La prueba ha fallado");
				Assert.assertFalse(true);
			}
				
			}else 
			{
				log.info("La automatizacion "+nomTest+" no tomara evidencias");
				System.out.println("La automatizacion no tomara evidencias para Tools QA Date...");
				// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
				homeTools.url(url);
				// ACCEDER AL METODO DE PRUEBA INICIAL
				homeTools.buttonDate(rutaCarpeta, evidencia);
				dateTools.sistemaDate(rutaCarpeta, evidencia);
				//driver.close();
			}
			
		} else 
		{
			log.info("El caso de prueba : Tools QA Date ha Fallado al iniciar");
			System.out.println("La automatizacion no se ejecutara para Tools QA Date...");
		}
	}
	
	
	@DataProvider(name = "datosMercury")
	public Object[][] datosMercury() throws Exception {
		Object[][] arreglo = ExcelUtilidades.getTableArray("./Data/data.xlsx", "mercuryTours");
		return arreglo;
	}
	
	@Test(dataProvider = "datosMercury", priority = 5)
	//INGRESAR A MERCURY TOURS, REGISTER, LLENAR EL FORMULARIO Y ENVIARLO
	public void mercuryTours(String url, String ejecutar, String evidencia,  String firstName, String lastName, 
			String phone, String email, String address, String city, String stateProvince, 
			String postalCode, String country, String userName, String password, String confirmPassword) throws Exception 
	{
		if (ejecutar.equals("Si")) 
		{
			// OBTENER EL NOMBRE DEL METODO A EJECUTAR
			String nomTest = Thread.currentThread().getStackTrace()[1].getMethodName();
			// CREAR CARPERTA PARA ALMECENAMIENTO DE IMAGENES
			File rutaCarpeta = claseBase.crearCarpeta(nomTest);
			log.info("El caso de prueba : " +nomTest+"ha iniciado correctamente");
			//VALIDAR SI SE GENERA EVIDENCIA
			if (evidencia.equals("Si")) {
			try {
				generarReportePdf.setRutaImagen(imagenReporteMercury);
				// INICIAR GRABACION EN VIDEO
				MyScreenRecorder.startRecording(nomTest, rutaCarpeta);
				// INICIA CREACION DE REPORTE PDF
				generarReportePdf.crearPlantilla(nomTest, rutaCarpeta);
				log.info("El caso de prueba : "+nomTest+" tomara evidencias");
				// ACCEDER AL METODO DE ABRIR LA PAGINA CON EXCEL
				mercury.urlAcceso(url);
				// ACCEDER AL METODO DE PRUEBA INICIAL
				mercury.homeMercury(rutaCarpeta, evidencia);
				mercury.formulario(rutaCarpeta, evidencia, firstName, lastName, phone, email, address, city, stateProvince,
						postalCode, country, userName, password, confirmPassword);
				// FINALIZAR GRABACION DE VIDEO
				MyScreenRecorder.stopRecording();
				// FINALILZAR CREACION DEL REPORTE PDF
				generarReportePdf.cerrarPlantilla("La prueba fue Exitosa");
				//driver.close();
			} catch (Exception e) {
				log.error(e.toString());
				// FINALIZAR GRABACION DE VIDEO
				MyScreenRecorder.stopRecording();
				// FINALILZAR CREACION DEL REPORTE PDF
				generarReportePdf.cerrarPlantilla("La prueba ha fallado");
				Assert.assertFalse(true);
			}
			}else 
			{
				log.info("La automatizacion "+nomTest+" no tomara evidencias");
				System.out.println("La automatizacion no tomara evidencias para Mercury Tours...");
				// ACCEDER AL METODO DE PRUEBA INICIAL
				mercury.homeMercury(rutaCarpeta, evidencia);
				mercury.formulario(rutaCarpeta, evidencia, firstName, lastName, phone, email, address, city, stateProvince,
						postalCode, country, userName, password, confirmPassword);
				//driver.close();
			}
			
		} else 
		{
			log.info("El caso de prueba : Mercury Tours ha Fallado al iniciar");
			System.out.println("La automatizacion no se ejecutara para Mercury Tours...");
		}
	}
	
	
	@AfterClass
	public void afterClass() 
	{
		
		driver.quit();
	}
}
